package cache

//具有到期功能并发安全的缓存库
import (
	"errors"
	"sync"
	"time"
)

//ExpiringCacheEntry 到期的缓存入口接口
type ExpiringCacheEntry interface {
	XCache(key string, expire time.Duration, value ExpiringCacheEntry)
	Expire()
	KeepAlive()
	timer() *time.Timer
}

//XEntry 进口的结构体
type XEntry struct {
	sync.Mutex
	key       string
	keepAlive bool
	expire    time.Duration
	t         *time.Timer
}

//xcache 是需要过期删除的  cache是不需要删除
var (
	xcache = make(map[string]ExpiringCacheEntry) //map 可以动态扩容 用来保存缓存的值
	cache  = make(map[string]interface{})
	xMux   sync.RWMutex
	mux    sync.RWMutex
)

//XCache 函数 XEntry是结构体 在函数内要对其修改时 要传入指针
//记录缓存内容 并且开一个新的goroutine去倒计时
func (xe *XEntry) XCache(key string, expire time.Duration, value ExpiringCacheEntry) {
	xe.keepAlive = true
	xe.key = key
	xe.expire = expire
	xMux.Lock()
	xcache[key] = value //
	xMux.Unlock()
	go xe.Expire() //开启一个goroutine进行倒计时

}

//Expire 进入倒计时，到期后删除
func (xe *XEntry) Expire() {
	for xe.keepAlive {
		xe.Lock()
		//进入缓存
		xe.keepAlive = false
		xe.Unlock()
		// t := time.NewTimer(xe.expire) //创建一个计时器
		// <-t.C                         //计时结束
		xe.t = time.NewTimer(xe.expire)
		<-xe.t.C
		if !xe.keepAlive {
			xMux.Lock()
			delete(xcache, xe.key)
			xMux.Unlock()
		}

	}
}

//KeepAlive 将文件恢复使用
func (xe *XEntry) KeepAlive() {
	xe.Lock()
	defer xe.Unlock()
	xe.keepAlive = true
}
func (xe *XEntry) timer() *time.Timer {
	return xe.t
}

//GetXCached 取出之前缓存的信息
func GetXCached(key string) (ece ExpiringCacheEntry, err error) {
	xMux.RLock()
	defer xMux.RUnlock()
	if r, ok := xcache[key]; ok {
		r.KeepAlive()
		return r, nil
	}
	return nil, errors.New("not found")

}

func (xe *XEntry) Clear() {
	xMux.Lock()
	defer xMux.Unlock()
	for _, v := range xcache {
		if v.timer() != nil {
			v.timer().Stop()
		}
	}
	xcache = make(map[string]ExpiringCacheEntry)
}
func Cache(key string, value interface{}) {
	mux.Lock()
	cache[key] = value
	mux.Unlock()
}

func GetCached(key string) (v interface{}, err error) {
	mux.RLock()
	defer mux.RUnlock()
	if r, ok := cache[key]; ok {
		return r, nil

	}
	return nil, errors.New("not found")

}

func Clear() {
	mux.Lock()
	defer mux.Unlock()
	cache = make(map[string]interface{})
}
